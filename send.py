# send.py
import re
import logging
from fastapi import APIRouter, HTTPException
from typing import Dict, Any, List, Optional

from clickup_client import (
    clickup_client,
    READY_STATUS,
    SENT_STATUS,
    INVALID_STATUS,
    NEW_STATUS
)
from mailer import send_email
from email_validator import validate_email_if_needed
from utils import _task_status_str  # <-- üü¢ –í–û–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï üü¢

log = logging.getLogger("sender")
router = APIRouter()

def _parse_details(description: str) -> Dict[str, str]:
    """
    (–≠—Ç–æ –Ω–∞—à–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    –ü–∞—Ä—Å–∏—Ç Email –∏ Website –∏–∑ 'description' (–∑–∞–º–µ—Ç–æ–∫) –∑–∞–¥–∞—á–∏.
    """
    email = None
    website = None

    if not description:
        return {}

    email_match = re.search(
        r"^\s*Email:?\s*[\r\n\s]*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})",
        description,
        re.IGNORECASE | re.MULTILINE
    )
    if email_match:
        email = email_match.group(1).strip()

    website_match = re.search(
        r"^\s*Website:?\s*[\r\n\s]*([^\s]+)", # –ò—â–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
        description,
        re.IGNORECASE | re.MULTILINE
    )
    if website_match:
        website = website_match.group(1).strip()
    
    return {"email": email, "website": website}


def run_send(state: str, limit: int = 50) -> Dict[str, Any]:
    
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç 'telegram_bot' –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
    
    try:
        list_id = clickup_client.get_or_create_list_for_state(state)
        # 1. –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ (–ª–µ–≥–∫–∏–µ)
        all_tasks = clickup_client.get_leads_from_list(list_id)
    except Exception as e:
        log.error("run_send: ClickUp error on get_leads_from_list: %s", e)
        raise RuntimeError(f"ClickUp error: {e}")

    # 2. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É "READY"
    ready_tasks = []
    for t in all_tasks:
        if _task_status_str(t).upper() == READY_STATUS:
            ready_tasks.append(t)
    
    # 3. –ë–µ—Ä–µ–º 'limit' –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
    tasks_to_process = ready_tasks[:limit]
    
    log.info(
        "run_send for %s: Total=%d, Ready=%d, Processing=%d",
        state, len(all_tasks), len(ready_tasks), len(tasks_to_process)
    )

    sent = 0
    skipped_no_email = 0
    failed_send = 0
    invalid_count = 0

    # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
    for lead_stub in tasks_to_process:
        task_id = lead_stub.get("id")
        clinic_name = lead_stub.get("name")
        if not task_id or not clinic_name:
            continue
            
        try:
            # 5. –ü–æ–ª—É—á–∞–µ–º –ü–û–õ–ù–´–ï –¥–µ—Ç–∞–ª–∏ (—Å 'description')
            task_details = clickup_client.get_task_details(task_id)
            description = task_details.get("description", "")
            
            # 6. –ü–∞—Ä—Å–∏–º 'description' (—É–∂–µ –Ω–æ–≤–æ–π, —É–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π)
            parsed_data = _parse_details(description)
            email = parsed_data.get("email")
            website = parsed_data.get("website")

            if not email:
                log.warning("Task %s (%s) is READY but has no 'Email:' in description.", task_id, clinic_name)
                skipped_no_email += 1
                continue

            # 7. –í–∞–ª–∏–¥–∞—Ü–∏—è
            log.info("Validating email %s for %s", email, clinic_name)
            is_valid = validate_email_if_needed(email)
            
            if is_valid is False:
                log.warning("Email %s for %s is INVALID.", email, clinic_name)
                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ INVALID
                clickup_client.move_lead_to_status(task_id, INVALID_STATUS)
                invalid_count += 1
                continue
            
            # 8. –û—Ç–ø—Ä–∞–≤–∫–∞
            log.info("Sending email to %s for %s", email, clinic_name)
            ok = send_email(
                to_email=email,
                clinic_name=clinic_name, 
                clinic_site=website # website –º–æ–∂–µ—Ç –±—ã—Ç—å None, mailer.py —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
            )
            
            if ok:
                log.info("Email sent to %s", email)
                sent += 1
                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ SENT
                clickup_client.move_lead_to_status(task_id, SENT_STATUS)
            else:
                log.warning("Failed to send email to %s", email)
                failed_send += 1

        except Exception as e:
            log.error("run_send: Failed to process task %s: %s", task_id, e)
            failed_send += 1

    # 7. –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–∞
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –û–°–¢–ê–õ–û–°–¨ –≤ "READY"
    processed_count = sent + invalid_count + failed_send + skipped_no_email
    remaining_ready = len(ready_tasks) - processed_count
    if remaining_ready < 0:
        remaining_ready = 0 
    
    # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤ "NEW"
    new_count = sum(1 for t in all_tasks if _task_status_str(t).upper() == NEW_STATUS)

    return {
        "state": state,
        "sent": sent,
        "skipped_no_email": skipped_no_email, # –ì–æ—Ç–æ–≤—ã, –Ω–æ –Ω–µ—Ç Email –≤ –∑–∞–º–µ—Ç–∫–∞—Ö
        "invalid": invalid_count,
        "failed_send": failed_send,
        "remaining_ready": remaining_ready, # –û—Å—Ç–∞–ª–æ—Å—å –≤ "READY"
        "total_new": new_count,             # –í—Å–µ–≥–æ –≤ "NEW" (–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ)
        "total_in_list": len(all_tasks),
    }


@router.post("/send-proposals")
def send_proposals(state: str, limit: int = 50) -> Dict[str, Any]:
    try:
        return run_send(state=state, limit=limit)
    except RuntimeError as e:
        raise HTTPException(status_code=500, detail=str(e))
