# telegram_bot.py
from typing import Dict, Any, Optional, List
import imaplib
import email
import logging

from config import settings
from clickup_client import (
    clickup_client,
    READY_STATUS,
    SENT_STATUS,
    REPLIED_STATUS,
    NEW_STATUS,
    INVALID_STATUS # –î–æ–±–∞–≤–∏–º
)
from telegram_notifier import send_message as tg_send
from send import run_send # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π run_send
from leads import upsert_leads_for_state
from utils import _task_status_str # <-- üü¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï

log = logging.getLogger("telegram_bot")
TELEGRAM_API_BASE = "https://api.telegram.org"

US_STATES = [
    "AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA",
    "HI","ID","IL","IN","IA","KS","KY","LA","ME","MD",
    "MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ",
    "NM","NY","NC","ND","OH","OK","OR","PA","RI","SC",
    "SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"
]

USER_STATE: Dict[int, str] = {}


def _allowed_chat(chat_id: int) -> bool:
    want = str(getattr(settings, "TELEGRAM_CHAT_ID", "")).strip()
    return (not want) or (str(chat_id) == want)


def _states_keyboard() -> Dict[str, Any]:
    rows: List[List[Dict[str, str]]] = []
    row: List[Dict[str, str]] = []
    for i, s in enumerate(US_STATES, start=1):
        row.append({"text": s})
        if i % 5 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return {"keyboard": rows, "resize_keyboard": True, "one_time_keyboard": False}


def _parse_cmd(text: str) -> List[str]:
    parts = text.strip().split()
    return [p.strip() for p in parts if p.strip()]

#
# üü¢ –§—É–Ω–∫—Ü–∏—è _task_status_str –£–î–ê–õ–ï–ù–ê –û–¢–°–Æ–î–ê –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ utils.py üü¢
#

def _stats_for_state(state: str) -> str:
    try:
        list_id = clickup_client.get_or_create_list_for_state(state)
        tasks = clickup_client.get_leads_from_list(list_id)
    except Exception as e:
        log.error("Failed to get stats for %s: %s", state, e)
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {state}: {e}"

    total = len(tasks)
    new_cnt = 0
    ready_cnt = 0
    sent_cnt = 0
    replied_cnt = 0
    invalid_cnt = 0

    for t in tasks:
        st = _task_status_str(t).upper()
        if st == NEW_STATUS:
            new_cnt += 1
        elif st == READY_STATUS:
            ready_cnt += 1
        elif st == SENT_STATUS:
            sent_cnt += 1
        elif st == REPLIED_STATUS:
            replied_cnt += 1
        elif st == INVALID_STATUS:
            invalid_cnt += 1
            
    other_cnt = total - (new_cnt + ready_cnt + sent_cnt + replied_cnt + invalid_cnt)

    return (
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {state}</b>\n"
        f"–í—Å–µ–≥–æ –≤ –ª–∏—Å—Ç–µ: {total}\n"
        f"---\n"
        f"–í –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ (NEW): {new_cnt}\n"
        f"–ì–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ (READY): {ready_cnt}\n"
        f"---\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (SENT): {sent_cnt}\n"
        f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç (REPLIED): {replied_cnt}\n"
        f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ (INVALID): {invalid_cnt}\n"
        f"–î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã: {other_cnt}"
    )


def _handle_collect(chat_id: int, state: str) -> None:
    tg_send(chat_id, f"–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–ª—è {state}... (Google –∏—â–µ—Ç)")
    try:
        # —Å–æ–±–∏—Ä–∞–µ–º
        report = upsert_leads_for_state(state)
        
        # –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –µ—â—ë —Ä–∞–∑ —Å—á–∏—Ç–∞–µ–º –ø–æ —Ñ–∞–∫—Ç—É
        stats = _stats_for_state(state)

        text = (
            f"<b>–°–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω: {state}</b>\n"
            f"–ù–∞–π–¥–µ–Ω–æ: {report['found']}\n"
            f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {report['created']}\n"
            f"–ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {report['skipped']}\n\n"
            f"{stats}"
        )
        tg_send(chat_id, text, parse_mode="HTML")
    except Exception as e:
        log.error("Handle_collect error: %s", e)
        tg_send(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ {state}: {e}")


def _handle_send(chat_id: int, state: str, limit: int) -> None:
    tg_send(chat_id, f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {state} (–ª–∏–º–∏—Ç: {limit})...")
    try:
        report = run_send(state=state, limit=limit)
        text = (
            f"<b>–†–∞—Å—Å—ã–ª–∫–∞ {state} (–ª–∏–º–∏—Ç {limit})</b>\n"
            f"---\n"
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {report['sent']}\n"
            f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö (-> INVALID): {report['invalid']}\n"
            f"üö´ –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ (SMTP): {report['failed_send']}\n"
            f"ü§î –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç Email): {report['skipped_no_email']}\n"
            f"---\n"
            f"üìà –û—Å—Ç–∞–ª–æ—Å—å –≤ 'READY': {report['remaining_ready']}\n"
            f"üìä –í –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ 'NEW': {report['total_new']}\n"
            f"Œ£ –í—Å–µ–≥–æ –≤ –ª–∏—Å—Ç–µ: {report['total_in_list']}"
        )
        tg_send(chat_id, text, parse_mode="HTML")
    except Exception as e:
        log.error("Handle_send error: %s", e)
        tg_send(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ {state}: {e}")


def _imap_fetch_unseen_froms(n_last: int = 50) -> List[str]:
    host = getattr(settings, "SMTP_HOST", "mail.adm.tools")
    port = getattr(settings, "SMTP_IMAP_PORT", 993)
    username = settings.SMTP_USERNAME
    password = settings.SMTP_PASSWORD

    out: List[str] = []
    try:
        M = imaplib.IMAP4_SSL(host, port)
        M.login(username, password)
        M.select("INBOX")
        status, data = M.search(None, "UNSEEN")
        if status != "OK":
            M.logout()
            return out

        ids = data[0].split()[-n_last:]
        if not ids:
            M.logout()
            return out
            
        log.info("IMAP: found %d unseen emails", len(ids))

        for msg_id in ids:
            typ, msg_data = M.fetch(msg_id, "(RFC822)")
            if typ != "OK":
                continue
            msg = email.message_from_bytes(msg_data[0][1])
            from_hdr = email.utils.parseaddr(msg.get("From"))[1]
            if from_hdr and from_hdr != username:
                out.append(from_hdr)
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                M.store(msg_id, "+FLAGS", "\\Seen")
        M.logout()
    except Exception as e:
        log.error("IMAP fetch failed: %s", e)
    return out


def _handle_replies(chat_id: int) -> None:
    tg_send(chat_id, "–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—á—Ç—É (IMAP)...")
    try:
        from_list = _imap_fetch_unseen_froms()
        if not from_list:
            tg_send(chat_id, "–ù–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Ç.")
            return

        log.info("IMAP: processing replies from: %s", from_list)
        moved = 0
        for addr in from_list:
            task = clickup_client.find_task_by_email(addr)
            if task:
                log.info("IMAP: Found task %s for email %s", task['task_id'], addr)
                clickup_client.move_lead_to_status(task["task_id"], REPLIED_STATUS)
                moved += 1
                
                # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —à—Ç–∞—Ç–∞ ---
                list_name = task.get('list_name', '') # e.g., "LEADS-NY"
                state = list_name.replace('LEADS-', '').upper() # e.g., "NY"
                state_info = f" (–®—Ç–∞—Ç: {state})" if state in US_STATES else ""
                # ---
                
                tg_send(
                    chat_id,
                    f"üì© –û—Ç–≤–µ—Ç –æ—Ç <b>{task['clinic_name']}</b>{state_info}.\n–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ ¬´{REPLIED_STATUS}¬ª.",
                    parse_mode="HTML",
                )
            else:
                log.warning("IMAP: No task found for email %s", addr)
                
        if moved == 0:
            tg_send(chat_id, f"–ü–æ–ª—É—á–µ–Ω–æ {len(from_list)} –æ—Ç–≤–µ—Ç–æ–≤, –Ω–æ –Ω–µ –Ω–∞—à–µ–ª –¥–ª—è –Ω–∏—Ö –∑–∞–¥–∞—á –≤ ClickUp.")
    except Exception as e:
        log.error("Handle_replies error: %s", e)
        tg_send(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–æ–≤: {e}")


def _help_text() -> str:
    return (
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/menu ‚Äî –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —à—Ç–∞—Ç–æ–≤\n"
        "/collect NY ‚Äî —Å–æ–±—Ä–∞—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/send NY 10 ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–∞ (limit) –∏–ª–∏ /send 10 (–µ—Å–ª–∏ —à—Ç–∞—Ç –≤—ã–±—Ä–∞–Ω)\n"
        "/stats NY ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ —à—Ç–∞—Ç—É\n"
        "/replies ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –æ—Ç–≤–µ—Ç—ã\n"
        "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à chat id"
    )


def register_commands() -> None:
    token = settings.TELEGRAM_BOT_TOKEN
    if not token:
        return
    try:
        import requests
        commands = [
            {"command": "menu",    "description": "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —à—Ç–∞—Ç–æ–≤"},
            {"command": "help",    "description": "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"},
            {"command": "id",      "description": "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π chat id"},
            {"command": "collect", "description": "–°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç –∏ —Å–≤–æ–¥–∫—É –ø–æ —à—Ç–∞—Ç—É"},
            {"command": "search",  "description": "–ê–ª–∏–∞—Å –¥–ª—è /collect"},
            {"command": "send",    "description": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–∞"},
            {"command": "stats",   "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —à—Ç–∞—Ç—É"},
            {"command": "replies", "description": "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –æ—Ç–≤–µ—Ç—ã"},
        ]
        r = requests.post(
            f"{TELEGRAM_API_BASE}/bot{token}/setMyCommands",
            json={"commands": commands},
            timeout=10,
        )
        print(f"[tg] setMyCommands: {r.status_code} {r.text[:200]}")
    except Exception as e:
        print(f"[tg] setMyCommands error: {e}")


def handle_update(update: Dict[str, Any]) -> Dict[str, Any]:
    msg = update.get("message") or update.get("edited_message")
    if not msg:
        return {"ok": True}

    chat_id = msg.get("chat", {}).get("id")
    text = (msg.get("text") or "").strip()

    if not chat_id or not text:
        return {"ok": True}
    if not _allowed_chat(chat_id):
        log.warning("Ignoring message from disallowed chat_id %s", chat_id)
        return {"ok": True}

    if text.upper() in US_STATES:
        USER_STATE[chat_id] = text.upper()
        tg_send(chat_id, f"–®—Ç–∞—Ç –≤—ã–±—Ä–∞–Ω: <b>{text.upper()}</b>", parse_mode="HTML")
        return {"ok": True}

    parts = _parse_cmd(text)
    if not parts:
        return {"ok": True}

    cmd = parts[0].lower()

    if cmd in ("/start", "/help"):
        tg_send(chat_id, _help_text())
        return {"ok": True}

    if cmd == "/id":
        tg_send(chat_id, f"–í–∞—à chat id: <code>{chat_id}</code>", parse_mode="HTML")
        return {"ok": True}

    if cmd == "/menu":
        tg_send(chat_id, "–í—ã–±–µ—Ä–∏ —à—Ç–∞—Ç, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π /collect, /send, /stats", reply_markup=_states_keyboard())
        return {"ok": True}

    if cmd in ("/collect", "/search"):
        state = (parts[1].upper() if len(parts) > 1 else USER_STATE.get(chat_id))
        if not state or state not in US_STATES:
            tg_send(chat_id, "–£–∫–∞–∂–∏ —à—Ç–∞—Ç: /collect NY –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —á–µ—Ä–µ–∑ /menu")
            return {"ok": True}
        _handle_collect(chat_id, state)
        return {"ok": True}

    if cmd == "/send":
        try:
            if len(parts) == 3:
                state = parts[1].upper()
                lim_str = parts[2]
            else:
                state = USER_STATE.get(chat_id)
                lim_str = parts[1] if len(parts) > 1 else "50" # default 50
            
            if not state or state not in US_STATES:
                tg_send(chat_id, "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —à—Ç–∞—Ç: /send NY 10 –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —á–µ—Ä–µ–∑ /menu")
                return {"ok": True}
            
            limit = int(lim_str)
            if limit <= 0 or limit > 500:
                tg_send(chat_id, "–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 500.")
                return {"ok": True}
                
            _handle_send(chat_id, state, limit)
        except (ValueError, IndexError):
            tg_send(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. \n–ü—Ä–∏–º–µ—Ä: /send NY 10\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏ —à—Ç–∞—Ç –∏ –Ω–∞–ø–∏—à–∏: /send 10")
        return {"ok": True}

    if cmd == "/stats":
        state = (parts[1].upper() if len(parts) > 1 else USER_STATE.get(chat_id))
        if not state or state not in US_STATES:
            tg_send(chat_id, "–£–∫–∞–∂–∏ —à—Ç–∞—Ç: /stats NY –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —á–µ—Ä–µ–∑ /menu")
            return {"ok": True}
        tg_send(chat_id, _stats_for_state(state), parse_mode="HTML")
        return {"ok": True}

    if cmd == "/replies":
        _handle_replies(chat_id)
        return {"ok": True}

    tg_send(chat
